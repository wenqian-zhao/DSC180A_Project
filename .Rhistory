library(kableExtra)  # Prettier RMarkdown (1.0.1)
library(ggplot2)     # general plotting tool (3.1.0)
library(haven)       # read stata files (2.0.0)
library(aod)         # hypothesis testing (1.3.1)
library(evtree)      # evolutionary learning of globally optimal trees (1.0-7)
library(estimatr)    # simple interface for OLS estimation w/ robust std errors ()
Non Cran Package Install
```{r}
remotes::install_github('susanathey/causalTree') # Uncomment this to install the causalTree package
remotes::install_github('susanathey/causalTree') # Uncomment this to install the causalTree package
library(causalTree)
remotes::install_github('grf-labs/sufrep') # Uncomment this to install the sufrep package
library(sufrep)
library(causalTree)
library(sufrep)
setwd("~/Documents/ucsd/dsc180/fall/proj/DSC180A_Project")
setwd("~/Documents/ucsd/dsc180/fall/proj/DSC180A_Project/src/R")
design1_data <- read.csv()
setwd("~/DSC180A_Project")
setwd("~/Documents/ucsd/dsc180/fall/proj/DSC180A_Project")
design1_data
design1_data
design1_data <- read.csv(file = "data/data_d1.csv")
design1_data <- read.csv(file = 'data/data_d1.csv')
design1_data <- read.csv(file = '/data/data_d1.csv')
design1_data <- read.csv(file = '~/data/data_d1.csv')
getcwd()
getwd()
setwd(..)
design1_data <- read.csv(file = '~/data/data_d1.csv')
design1_data <- read.csv(file = '../../data/data_d1.csv')
design1_data
design1_data <- read.csv(file = '../../data/data_d1.csv')
design1_data
design1_data <- read.csv(file = '../../data/data_d1.csv')
design1_data
# Make a data.frame containing summary statistics of interest
summ_stats <- fBasics::basicStats(df)
# Make a data.frame containing summary statistics of interest
summ_stats <- fBasics::basicStats(design1_data)
summ_stats <- as.data.frame(t(summ_stats))
# Rename some of the columns for convenience
summ_stats <- summ_stats[c("Mean", "Stdev", "Minimum", "1. Quartile", "Median",  "3. Quartile", "Maximum")] %>%
rename("Lower quartile" = '1. Quartile', "Upper quartile"= "3. Quartile")
# Make a data.frame containing summary statistics of interest
summ_stats <- fBasics::basicStats(design1_data)
summ_stats <- as.data.frame(t(summ_stats))
# Rename some of the columns for convenience
summ_stats <- summ_stats[c("Mean", "Stdev", "Minimum", "1. Quartile", "Median",  "3. Quartile", "Maximum")] %>% rename("Lower quartile" = '1. Quartile', "Upper quartile"= "3. Quartile")
# Rename some of the columns for convenience
summ_stats # <- summ_stats[c("Mean", "Stdev", "Minimum", "1. Quartile", "Median",  "3. Quartile", "Maximum")] %>% rename("Lower quartile" = '1. Quartile', "Upper quartile"= "3. Quartile")
# Rename some of the columns for convenience
summ_stats # <- summ_stats[c("Mean", "Stdev", "Minimum", "1. Quartile", "Median",  "3. Quartile", "Maximum")] %>% rename("Lower quartile" = '1. Quartile', "Upper quartile"= "3. Quartile")
design1_data <- read.csv(file = '../../data/data_d1.csv')
design1_data
design1_data <- read.csv(file = '../../data/data_d1.csv')
design1_data
# Make a data.frame containing summary statistics of interest
summ_stats <- fBasics::basicStats(design1_data)
summ_stats <- as.data.frame(t(summ_stats))
# Rename some of the columns for convenience
summ_stats # <- summ_stats[c("Mean", "Stdev", "Minimum", "1. Quartile", "Median",  "3. Quartile", "Maximum")] %>% rename("Lower quartile" = '1. Quartile', "Upper quartile"= "3. Quartile")
# Make a data.frame containing summary statistics of interest
summ_stats <- fBasics::basicStats(design1_data)
summ_stats <- as.data.frame(t(summ_stats))
# Rename some of the columns for convenience
summ_stats <- summ_stats[c("Mean", "Stdev", "Minimum", "1. Quartile", "Median",
"3. Quartile", "Maximum")] %>%
rename("Lower quartile" = '1. Quartile', "Upper quartile"= "3. Quartile")
# Make a data.frame containing summary statistics of interest
summ_stats <- fBasics::basicStats(design1_data)
summ_stats <- as.data.frame(t(summ_stats))
# Rename some of the columns for convenience
summ_stats <- summ_stats[c("Mean", "Stdev", "Minimum", "1. Quartile", "Median",
"3. Quartile", "Maximum")]
summ_stats
shuffled_d1 = design1_data[sample(1:nrow(design1_data)), ]
shuffled_d1
shuffled_d1 = design1_data[sample(1:nrow(design1_data)), ]
d1_test = shuffled_d1[, 8000]
shuffled_d1 = design1_data[sample(1:nrow(design1_data)), ]
d1_test = shuffled_d1[0: 8000]
shuffled_d1 = design1_data[sample(1:nrow(design1_data)), ]
d1_test = shuffled_d1[0: 8000, ]
d1_test
shuffled_d1 = design1_data[sample(1:nrow(design1_data)), ]
d1_test = shuffled_d1[0: 8000, ]
d1_train = shuffled_d1[8000: 9000, ]
d1_est = shuffled_d1[9000: 10000, ]
data_split <- function(data, n_est=1000) {
shuffled <- data[sample(1:nrow(data)), ]
te <- shuffled[0: 8000, ]
tr <- shuffled[8000: 8000 + n_est, ]
est <- shuffled[8000 + n_est: 8000 + 2 * n_est, ]
return (te, tr, est)
}
data_split <- function(data, n_est=1000) {
shuffled <- data[sample(1:nrow(data)), ]
te <- shuffled[0: 8000, ]
tr <- shuffled[8000: 8000 + n_est, ]
est <- shuffled[8000 + n_est: 8000 + 2 * n_est, ]
return (te, tr, est)
}
d1_te, d1_tr, d1_est = data_split(design1_data)
data_split <- function(data, n_est=1000) {
shuffled <- data[sample(1:nrow(data)), ]
te <- shuffled[0: 8000, ]
tr <- shuffled[8000: 8000 + n_est, ]
est <- shuffled[8000 + n_est: 8000 + 2 * n_est, ]
return (te, tr, est)
}
(d1_te, d1_tr, d1_est) = data_split(design1_data)
data_split <- function(data, n_est=1000) {
shuffled <- data[sample(1:nrow(data)), ]
te <- shuffled[0: 8000, ]
tr <- shuffled[8000: 8000 + n_est, ]
est <- shuffled[8000 + n_est: 8000 + 2 * n_est, ]
return (te, tr, est)
}
splitted_d1 = data_split(design1_data)
data_split <- function(data, n_est=1000) {
shuffled <- data[sample(1:nrow(data)), ]
te <- shuffled[0: 8000, ]
tr <- shuffled[8000: 8000 + n_est, ]
est <- shuffled[8000 + n_est: 8000 + 2 * n_est, ]
return ((te, tr, est))
data_split <- function(data, n_est=1000) {
shuffled <- data[sample(1:nrow(data)), ]
te <- shuffled[0: 8000, ]
tr <- shuffled[8000: 8000 + n_est, ]
est <- shuffled[8000 + n_est: 8000 + 2 * n_est, ]
return (list(te, tr, est))
}
c(d1_te, d1_tr, d1_est) := data_split(design1_data)
data_split <- function(data, n_est=1000) {
shuffled <- data[sample(1:nrow(data)), ]
te <- shuffled[0: 8000, ]
tr <- shuffled[8000: 8000 + n_est, ]
est <- shuffled[8000 + n_est: 8000 + 2 * n_est, ]
return (list(te, tr, est))
}
c(d1_te, d1_tr, d1_est) = data_split(design1_data)
data_split <- function(data, n_est=1000) {
shuffled <- data[sample(1:nrow(data)), ]
te <- shuffled[0: 8000, ]
tr <- shuffled[8000: 8000 + n_est, ]
est <- shuffled[8000 + n_est: 8000 + 2 * n_est, ]
return (list(te, tr, est))
}
splitted = data_split(design1_data)
data_split <- function(data, n_est=1000) {
shuffled <- data[sample(1:nrow(data)), ]
te <- shuffled[0: 8000, ]
tr <- shuffled[8000: 8000 + n_est, ]
est <- shuffled[8000 + n_est: 8000 + 2 * n_est, ]
return (list(te, tr, est))
}
splitted = data_split(design1_data)
data_split <- function(data, n_est=1000) {
shuffled <- data[sample(1:nrow(data)), ]
te <- shuffled[0: 8000, ]
tr <- shuffled[8000: 8000 + n_est, ]
est <- shuffled[8000 + n_est: 8000 + 2 * n_est, ]
return (list(te, tr, est))
}
splitted = data_split(design1_data)
d1_te = splitted[0, ]
data_split <- function(data, n_est=1000) {
shuffled <- data[sample(1:nrow(data)), ]
te <- shuffled[0: 8000, ]
tr <- shuffled[8000: 8000 + n_est, ]
est <- shuffled[8000 + n_est: 8000 + 2 * n_est, ]
return (list(te, tr, est))
}
splitted = data_split(design1_data)
d1_te = splitted[0]
d1_te
data_split <- function(data, n_est=1000) {
shuffled <- data[sample(1:nrow(data)), ]
te <- shuffled[0: 8000, ]
tr <- shuffled[8000: 8000 + n_est, ]
est <- shuffled[8000 + n_est: 8000 + 2 * n_est, ]
return (list(te, tr, est))
}
splitted = data_split(design1_data)
splitted
data_split <- function(data, n_est=1000) {
shuffled <- data[sample(1:nrow(data)), ]
te <- shuffled[0: 8000, ]
tr <- shuffled[8000: 8000 + n_est, ]
est <- shuffled[8000 + n_est: 8000 + 2 * n_est, ]
return (list(te, tr, est))
}
splitted = data_split(design1_data)
splitted
data_split <- function(data, n_est=1000) {
shuffled <- data[sample(1:nrow(data)), ]
te <- shuffled[0: 8000, ]
tr <- shuffled[8000: (8000 + n_est), ]
est <- shuffled[(8000 + n_est): (8000 + 2 * n_est), ]
return (list(te, tr, est))
}
splitted = data_split(design1_data)
splitted
data_split <- function(data, n_est=1000) {
shuffled <- data[sample(1:nrow(data)), ]
te <- shuffled[0: 8000, ]
tr <- shuffled[8000: (8000 + n_est), ]
est <- shuffled[(8000 + n_est): (8000 + 2 * n_est), ]
return (list(te, tr, est))
}
splitted = data_split(design1_data)
splitted
data_split <- function(data, n_est=1000) {
shuffled <- data[sample(1:nrow(data)), ]
te <- shuffled[0: 8000, ]
tr <- shuffled[8000: (8000 + n_est), ]
est <- shuffled[(8000 + n_est): (8000 + 2 * n_est), ]
return (list(te, tr, est))
}
splitted = data_split(design1_data)
splitted[0]
data_split <- function(data, n_est=1000) {
shuffled <- data[sample(1:nrow(data)), ]
te <- shuffled[0: 8000, ]
tr <- shuffled[8000: (8000 + n_est), ]
est <- shuffled[(8000 + n_est): (8000 + 2 * n_est), ]
return (list(te, tr, est))
}
splitted = data_split(design1_data)
splitted[1]
data_split <- function(data, n_est=1000) {
shuffled <- data[sample(1:nrow(data)), ]
te <- shuffled[0: 8000, ]
tr <- shuffled[8000: (8000 + n_est), ]
est <- shuffled[(8000 + n_est): (8000 + 2 * n_est), ]
return (list(te, tr, est))
}
splitted_d1 = data_split(design1_data)
d1_te = splitted_d1[1]
d1_tr = splitted_d1[2]
d1_est = splitted_d1[3]
data_split <- function(data, n_est=1000) {
shuffled <- data[sample(1:nrow(data)), ]
te <- shuffled[0: 8000, ]
tr <- shuffled[8000: (8000 + n_est), ]
est <- shuffled[(8000 + n_est): (8000 + 2 * n_est), ]
return (list(te, tr, est))
}
splitted_d1 = data_split(design1_data)
d1_te = splitted_d1[1]
d1_tr = splitted_d1[2]
d1_est = splitted_d1[3]
d1_est
data_split <- function(data, n_est=1000) {
shuffled <- data[sample(1:nrow(data)), ]
te <- shuffled[0: 8000, ]
tr <- shuffled[8000: (8000 + n_est), ]
est <- shuffled[(8000 + n_est): (8000 + 2 * n_est), ]
return (list(te, tr, est))
}
splitted_d1 = data_split(design1_data)
d1_te = splitted_d1[1]
d1_tr = splitted_d1[2]
d1_est = splitted_d1[3]
d1_tr
data_split <- function(data, n_est=1000) {
shuffled <- data[sample(1:nrow(data)), ]
te <- shuffled[0: 8000, ]
tr <- shuffled[8000: (8000 + n_est), ]
est <- shuffled[(8000 + n_est): (8000 + 2 * n_est), ]
return (list(te, tr, est))
}
splitted_d1 = data_split(design1_data)
d1_te = splitted_d1[1]
d1_tr = splitted_d1[2]
d1_est = splitted_d1[3]
d1_te
data_split <- function(data, n_est=1000) {
shuffled <- data[sample(1:nrow(data)), ]
te <- shuffled[1: 8000, ]
tr <- shuffled[8000: (8000 + n_est), ]
est <- shuffled[(8000 + n_est): (8000 + 2 * n_est), ]
return (list(te, tr, est))
}
splitted_d1 = data_split(design1_data)
d1_te = splitted_d1[1]
d1_tr = splitted_d1[2]
d1_est = splitted_d1[3]
d1_te
data_split <- function(data, n_est=1000) {
shuffled <- data[sample(1:nrow(data)), ]
te <- shuffled[1: 8000, ]
tr <- shuffled[8001: (8000 + n_est), ]
est <- shuffled[(8000 + n_est): (8000 + 2 * n_est), ]
return (list(te, tr, est))
}
splitted_d1 = data_split(design1_data)
d1_te = splitted_d1[1]
d1_tr = splitted_d1[2]
d1_est = splitted_d1[3]
d1_te
data_split <- function(data, n_est=1000) {
shuffled <- data[sample(1:nrow(data)), ]
te <- shuffled[0: 8000, ]
tr <- shuffled[8001: (8000 + n_est), ]
est <- shuffled[(8000 + n_est): (8000 + 2 * n_est), ]
return (list(te, tr, est))
}
splitted_d1 = data_split(design1_data)
d1_te = splitted_d1[1]
d1_tr = splitted_d1[2]
d1_est = splitted_d1[3]
d1_te
data_split <- function(data, n_est=1000) {
shuffled <- data[sample(1:nrow(data)), ]
te <- shuffled[1: 8000, ]
tr <- shuffled[8001: (800 + n_est), ]
est <- shuffled[(8001 + n_est): (8000 + 2 * n_est), ]
return (list(te, tr, est))
}
splitted_d1 = data_split(design1_data)
d1_te = splitted_d1[1]
d1_tr = splitted_d1[2]
d1_est = splitted_d1[3]
d1_te
data_split <- function(data, n_est=1000) {
shuffled <- data[sample(1:nrow(data)), ]
te <- shuffled[1: 8000, ]
tr <- shuffled[8001: (8000 + n_est), ]
est <- shuffled[(8001 + n_est): (8000 + 2 * n_est), ]
return (list(te, tr, est))
}
splitted_d1 = data_split(design1_data)
d1_te = splitted_d1[1]
d1_tr = splitted_d1[2]
d1_est = splitted_d1[3]
d1_te
data_split <- function(data, n_est=1000) {
shuffled <- data[sample(1:nrow(data)), ]
te <- shuffled[1: 8000, ]
tr <- shuffled[8001: (8000 + n_est), ]
est <- shuffled[(8001 + n_est): (8000 + 2 * n_est), ]
return (list(te, tr, est))
}
splitted_d1 = data_split(design1_data)
d1_te = splitted_d1[1]
d1_tr = splitted_d1[2]
d1_est = splitted_d1[3]
d1_tr
data_split <- function(data, n_est=1000) {
shuffled <- data[sample(1:nrow(data)), ]
te <- shuffled[1: 8000, ]
tr <- shuffled[8001: (8000 + n_est), ]
est <- shuffled[(8001 + n_est): (8000 + 2 * n_est), ]
return (list(te, tr, est))
}
splitted_d1 = data_split(design1_data)
d1_te = splitted_d1[1]
d1_tr = splitted_d1[2]
d1_est = splitted_d1[3]
d1_est
data_split <- function(data, n_est=1000) {
shuffled <- data[sample(1:nrow(data)), ]
te <- shuffled[1: 8000, ]
tr <- shuffled[8001: (8000 + n_est), ]
est <- shuffled[(8001 + n_est): (8000 + 2 * n_est), ]
return (list(te, tr, est))
}
splitted_d1 <- data_split(design1_data)
d1_te <- splitted_d1[1]
d1_tr <- splitted_d1[2]
d1_est <- splitted_d1[3]
library(causalTree)
tree <- causalTree(Y~ x1 + x2 ,
data = simulation.1,
treatment = simulation.1$treatment,
split.Rule = "CT",
cv.option = "CT",
split.Honest = T,
cv.Honest = T,
split.Bucket = F,
xval = 5,
cp = 0,
minsize = 20,
propensity = 0.5)
library(causalTree)
tree <- causalTree(Y ~ x1 + x2 ,
data = simulation.1,
treatment = simulation.1$treatment,
split.Rule = "CT",
cv.option = "CT",
split.Honest = T,
cv.Honest = T,
split.Bucket = F,
xval = 5,
cp = 0,
minsize = 20,
propensity = 0.5)
library(causalTree)
tree <- causalTree("Y ~ x1 + x2" ,
data = simulation.1,
treatment = simulation.1$treatment,
split.Rule = "CT",
cv.option = "CT",
split.Honest = T,
cv.Honest = T,
split.Bucket = F,
xval = 5,
cp = 0,
minsize = 20,
propensity = 0.5)
library(causalTree)
tree <- causalTree("factor(Y) ~ x1 + x2" ,
data = simulation.1,
treatment = simulation.1$treatment,
split.Rule = "CT",
cv.option = "CT",
split.Honest = T,
cv.Honest = T,
split.Bucket = F,
xval = 5,
cp = 0,
minsize = 20,
propensity = 0.5)
fmla_ct <- paste("factor(Y) ~", "x1 + x2")
tree <- causalTree(formula = fmla_ct ,
data = simulation.1,
treatment = simulation.1$treatment,
split.Rule = "CT",
cv.option = "CT",
split.Honest = T,
cv.Honest = T,
split.Bucket = F,
xval = 5,
cp = 0,
minsize = 20,
propensity = 0.5)
fmla_ct <- paste("factor(Y) ~", "x1 + x2")
Y <- d1_tr$Y
tree <- causalTree(formula = fmla_ct ,
data = simulation.1,
treatment = simulation.1$treatment,
split.Rule = "CT",
cv.option = "CT",
split.Honest = T,
cv.Honest = T,
split.Bucket = F,
xval = 5,
cp = 0,
minsize = 20,
propensity = 0.5)
train_fraction <- 0.80  # Use train_fraction % of the dataset to train our models
n <- dim(design1_data)[1]
train_idx <- sample.int(n, replace=F, size=floor(n*train_fraction))
df_train <- design1_data[train_idx,]
df_test <- design1_data[-train_idx,]
train_fraction <- 0.80  # Use train_fraction % of the dataset to train our models
n <- dim(design1_data)[1]
train_idx <- sample.int(n, replace=F, size=floor(n*train_fraction))
df_train <- design1_data[train_idx,]
df_test <- design1_data[-train_idx,]
split_size <- floor(nrow(df_train) * 0.5)
split_idx <- sample(nrow(df_train), replace=FALSE, size=split_size)
# Make the splits
df_split <- df_train[split_idx,]
df_est <- df_train[-split_idx,]
fmla_ct <- paste("factor(Y) ~", "x1 + x2")
ct_unpruned <- honest.causalTree(
formula=fmla_ct,            # Define the model
data=df_split,              # Subset used to create tree structure
est_data=df_est,            # Which data set to use to estimate effects
treatment=df_split$W,       # Splitting sample treatment variable
est_treatment=df_est$W,     # Estimation sample treatment variable
split.Rule="CT",            # Define the splitting option
cv.option="TOT",            # Cross validation options
cp=0,                       # Complexity parameter
split.Honest=TRUE,          # Use honesty when splitting
cv.Honest=TRUE,             # Use honesty when performing cross-validation
minsize=25,                 # Min. number of treatment and control cases in each leaf
HonestSampleSize=nrow(df_est)
) # Num obs used in estimation after building the tree
fmla_ct <- paste("factor(Y) ~", "x1 + x2")
ct_unpruned <- honest.causalTree(
formula=fmla_ct,            # Define the model
data=df_split,              # Subset used to create tree structure
est_data=df_est,            # Which data set to use to estimate effects
treatment=df_split$W,       # Splitting sample treatment variable
est_treatment=df_est$W,     # Estimation sample treatment variable
split.Rule="CT",            # Define the splitting option
cv.option="CT",            # Cross validation options
cp=0,                       # Complexity parameter
split.Honest=TRUE,          # Use honesty when splitting
cv.Honest=TRUE,             # Use honesty when performing cross-validation
minsize=25,                 # Min. number of treatment and control cases in each leaf
HonestSampleSize=nrow(df_est)
) # Num obs used in estimation after building the tree
fmla_ct <- paste("factor(Y) ~", "x1 + x2")
ct_unpruned <- honest.causalTree(
formula=fmla_ct,            # Define the model
data=df_split,              # Subset used to create tree structure
est_data=df_est,            # Which data set to use to estimate effects
treatment=df_split$W,       # Splitting sample treatment variable
est_treatment=df_est$W,     # Estimation sample treatment variable
split.Rule="CT",            # Define the splitting option
cv.option="CT",            # Cross validation options
cp=0,                       # Complexity parameter
split.Honest=TRUE,          # Use honesty when splitting
cv.Honest=TRUE,             # Use honesty when performing cross-validation
# Min. number of treatment and control cases in each leaf
HonestSampleSize=nrow(df_est)
) # Num obs used in estimation after building the tree
